/*
 * Copyright IBM Corp. 2025 - 2025
 * SPDX-License-Identifier: Apache-2.0
 */
package com.ibm.watsonx.ai.chat.model;

import static java.util.Objects.isNull;
import static java.util.Objects.requireNonNull;
import java.util.Map;
import com.ibm.watsonx.ai.chat.model.JsonSchema.ObjectSchema;

/**
 * Represents a function call generated by the model.
 * <p>
 * Example usage:
 *
 * <pre>{@code
 * JsonSchema parameters = JsonSchema.builder()
 *     .addProperty("query", JsonSchema.StringSchema.of("Search query"))
 *     .addRequired("query")
 *     .build();
 *
 * // Create a Tool representing a search function
 * Tool.of("search", "Performs a search operation", parameters);
 * }</pre>
 */
public record Tool(String type, Function function) {

    public record Function(String name, String description, Object parameters) {}

    private static final String TYPE = "function";

    public Tool {
        type = TYPE;
        requireNonNull(function, "function cannot be null");
    }

    /**
     * Creates a new {@link Tool}.
     *
     * @param name The name of the function.
     * @param description A description of what the function does, used by the model to decide when and how to call the function.
     * @return A new {@link Tool} instance.
     */
    public static Tool of(String name, String description) {
        return new Tool("function", new Function(name, description, null));
    }

    /**
     * Creates a new {@link Tool}.
     *
     * @param name The name of the function.
     * @param description A description of what the function does, used by the model to decide when and how to call the function.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     * @return A new {@link Tool} instance.
     */
    public static Tool of(String name, String description, Map<String, Object> parameters) {
        return new Tool("function", new Function(name, description, parameters));
    }

    /**
     * Creates a new {@link Tool}.
     *
     * @param name The name of the function.
     * @param description A description of what the function does, used by the model to decide when and how to call the function.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     * @return A new {@link Tool} instance.
     */
    public static Tool of(String name, String description, JsonSchema parameters) {
        return new Tool("function", new Function(name, description, parameters));
    }

    /**
     * Creates a new {@link Tool}.
     *
     * @param name The name of the function.
     * @param description A description of what the function does, used by the model to decide when and how to call the function.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     * @return A new {@link Tool} instance.
     */
    public static Tool of(String name, String description, ObjectSchema.Builder parameters) {
        requireNonNull(parameters);
        return of(name, description, parameters.build());
    }

    /**
     * Creates a new {@link Tool}.
     *
     * @param name The name of the function.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     * @return A new {@link Tool} instance.
     */
    public static Tool of(String name, JsonSchema parameters) {
        return of(name, null, parameters);
    }

    /**
     * Creates a new {@link Tool}.
     *
     * @param name The name of the function.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     * @return A new {@link Tool} instance.
     */
    public static Tool of(String name, ObjectSchema.Builder parameters) {
        requireNonNull(parameters);
        return of(name, parameters.build());
    }

    /**
     * Checks whether this tool has any parameters defined.
     *
     * @return {@code true} if parameters are present, {@code false} otherwise.
     */
    public boolean hasParameters() {
        return isNull(function.parameters) ? false : true;
    }
}