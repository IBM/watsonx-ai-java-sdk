/*
 * Copyright IBM Corp. 2025 - 2025
 * SPDX-License-Identifier: Apache-2.0
 */
package com.ibm.watsonx.ai.textgeneration;

import java.util.List;

/**
 * Represents the response returned from a text generation request.
 *
 * @param modelId the ID of the model that produced the result (e.g., "google/flan-ul2")
 * @param createdAt the timestamp of when the response was generated, in ISO 8601 format (e.g., "2020-05-02T16:27:51Z")
 * @param modelVersion the version of the model (e.g., "1.0.0")
 * @param results a list of generation results (at least one)
 */
public record TextGenerationResponse(
  String modelId,
  String createdAt,
  String modelVersion,
  List<Result> results) {

  /**
   * Returns the textual content of text request response.
   *
   * @return The message content
   */
  public String toText() {
    var result = results.get(0);
    return result.generatedText();
  }

  /**
   * A single generation result from the model.
   *
   * @param generatedText the final generated text string
   * @param stopReason reason why generation stopped (e.g., "token_limit", "eos_token", "max_tokens")
   * @param generatedTokenCount the number of tokens generated by the model
   * @param inputTokenCount the number of input tokens processed
   * @param seed the seed used for generation (if applicable)
   * @param generatedTokens list of individual generated tokens with metadata
   * @param inputTokens list of input tokens with metadata (only for decoder-only models)
   * @param moderations moderation results from content detectors
   */
  public record Result(
    String generatedText,
    String stopReason,
    Integer generatedTokenCount,
    Integer inputTokenCount,
    Integer seed,
    List<TokenInfo> generatedTokens,
    List<TokenInfo> inputTokens,
    ModerationResults moderations) {
  }

  /**
   * Detailed information about a single token.
   *
   * @param text the token text
   * @param logprob natural logarithm of the token's probability
   * @param rank the token's rank among other candidate tokens
   * @param topTokens the top candidate tokens at this position
   */
  public record TokenInfo(String text, Double logprob, Integer rank, TopTokenInfo topTokens) {
  }

  /**
   * Represents the top tokens.
   *
   * @param text the token text.
   * @param logprob the natural log of probability for the token.
   */
  public record TopTokenInfo(String text, Double logprob) {
  }

  /**
   * Results from the moderation systems.
   *
   * @param hap moderation result for HAP (hate, abuse, profanity)
   * @param pii moderation result for personally identifiable information
   * @param graniteGuardian moderation result from Granite Guardian
   */
  public record ModerationResults(ModerationResult hap, ModerationResult pii, ModerationResult graniteGuardian) {
  }

  /**
   * A single moderation match result.
   *
   * @param score probability that this match is valid (between 0 and 1)
   * @param input true if found in input, false if in output
   * @param position range (start, end) in the text where the match occurred
   * @param entity the type of entity found (e.g., "EmailAddress")
   * @param word the actual matched text (optional, based on request config)
   */
  public record ModerationResult(Float score, Boolean input, ModerationRange position, String entity, String word) {
  }

  /**
   * A range in the text marked by start (inclusive) and end (exclusive) index.
   *
   * @param start the start index (inclusive), must be ≥ 0
   * @param end the end index (exclusive), must be ≥ 0
   */
  public record ModerationRange(Integer start, Integer end) {
  }
}
