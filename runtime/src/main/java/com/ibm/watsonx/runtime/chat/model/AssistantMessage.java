package com.ibm.watsonx.runtime.chat.model;

import static java.util.Objects.isNull;
import java.util.Arrays;
import java.util.List;

/**
 * Represents a message authored by the assistant within a chat interaction.
 * <p>
 * An {@code AssistantMessage} may contain natural language text or tool calls (e.g., function calls). Either {@code content} or {@code toolCalls}
 * must be present.
 * <p>
 * Example usage:
 * 
 * <pre>{@code
 * AssistantMessage.text("Sure, here's the weather forecast: ...");
 * }</pre>
 *
 * @param role the role of the message's author, always {@code assistant}
 * @param content the assistant's message content, optional if {@code toolCalls} is provided
 * @param name optional name to differentiate between assistant participants
 * @param refusal an optional refusal message when the assistant declines to perform a task
 * @param toolCalls optional tool calls (e.g., function calls) generated by the model
 */
public final record AssistantMessage(
    String role,
    String content,
    String name,
    String refusal,
    List<ToolCall> toolCalls) implements ChatMessage {

    public static final String ROLE = "assistant";

    public AssistantMessage {
        role = ROLE;
        if (isNull(content) && isNull(toolCalls)) {
            throw new NullPointerException("Either content or toolCalls must be specified");
        }
    }

    /**
     * Creates a new {@link AssistantMessage}.
     *
     * @param content the assistant's message content
     * @param name optional name for the assistant
     * @param refusal optional refusal message
     * @return a new {@link AssistantMessage}
     */
    public static AssistantMessage text(String content, String name, String refusal) {
        return new AssistantMessage(ROLE, content, name, refusal, null);
    }

    /**
     * Creates a new {@link AssistantMessage}.
     *
     * @param name optional name for the assistant
     * @param refusal optional refusal message
     * @param toolCalls tool calls (nullable)
     * @return a new {@link AssistantMessage}
     */
    public static AssistantMessage tools(String name, String refusal, List<ToolCall> toolCalls) {
        return new AssistantMessage(ROLE, null, name, refusal, toolCalls);
    }

    /**
     * Creates a new {@link AssistantMessage} containing only content.
     *
     * @param content the assistant's message content
     * @return a new {@link AssistantMessage}
     */
    public static AssistantMessage text(String content) {
        return text(content, null, null);
    }

    /**
     * Creates a new {@link AssistantMessage} containing only tool calls.
     *
     * @param toolCalls the assistant's tool calls
     * @return a new {@link AssistantMessage}
     */
    public static AssistantMessage tools(List<ToolCall> toolCalls) {
        return tools(null, null, toolCalls);
    }

    /**
     * Creates a new {@link AssistantMessage} from one or more {@link ToolCall} instances.
     *
     * @param toolCalls the assistant's tool calls
     * @return a new {@link AssistantMessage}
     */
    public static AssistantMessage of(ToolCall... toolCalls) {
        return tools(Arrays.asList(toolCalls));
    }
}